tests 7-base_geometry.py
========================

>>> base_geometry = __import__("7-base_geometry").BaseGeometry
>>> bg = base_geometry()

Expcted to work with no error

>>> bg.integer_validator("my_int", 12);

>>> bg.integer_validator("width", 15);

Expect exceptions to be raised

>>> bg.integer_validator("name", "jhon")
Traceback (most recent call last):
TypeError: name must be an integer

>>> bg.integer_validator("age", -10)
Traceback (most recent call last):
ValueError: age must be greater than 0

>>> bg.integer_validator("number" , 0)
Traceback (most recent call last):
ValueError: number must be greater than 0

>>> bg.integer_validator("distance", 2.4)
Traceback (most recent call last):
TypeError: distance must be an integer

>>> bg.integer_validator("bool", True)
Traceback (most recent call last):
TypeError: bool must be an integer

>>> bg.integer_validator("float", 1.5)
Traceback (most recent call last):
TypeError: float must be an integer

>>> bg.integer_validator("complex", complex(1, 1))
Traceback (most recent call last):
TypeError: complex must be an integer

>>> bg.integer_validator("string", "hello")
Traceback (most recent call last):
TypeError: string must be an integer

>>> bg.integer_validator("tuple", (1, 2))
Traceback (most recent call last):
TypeError: tuple must be an integer

>>> bg.integer_validator("list", [1, 2, 3])
Traceback (most recent call last):
TypeError: list must be an integer

>>> bg.integer_validator("dict", {"key": "value"})
Traceback (most recent call last):
TypeError: dict must be an integer

>>> bg.integer_validator("set", {"hello", "world"})
Traceback (most recent call last):
TypeError: set must be an integer

>>> bg.integer_validator("frozenset", frozenset(["hello", "world"]))
Traceback (most recent call last):
TypeError: frozenset must be an integer

>>> bg.integer_validator("bytes", b"bytes")
Traceback (most recent call last):
TypeError: bytes must be an integer

>>> bg.integer_validator("bytearrays", bytearray(b"bytes"))
Traceback (most recent call last):
TypeError: bytearrays must be an integer

testing area

>>> bg.area()
Traceback (most recent call last):
Exception: area() is not implemented

testing for argument number

>>> bg.area(1)
Traceback (most recent call last):
TypeError: area() takes 1 positional argument but 2 were given

>>> bg.integer_validator()
Traceback (most recent call last):
TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value'

>>> bg.integer_validator(1)
Traceback (most recent call last):
TypeError: integer_validator() missing 1 required positional argument: 'value'

>>> bg.integer_validator("lenght", 12, 1)
Traceback (most recent call last):
TypeError: integer_validator() takes 3 positional arguments but 4 were given
